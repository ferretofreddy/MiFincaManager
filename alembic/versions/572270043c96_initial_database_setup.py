"""Initial database setup

Revision ID: 572270043c96
Revises: 
Create Date: 2025-06-24 19:53:35.117444

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '572270043c96'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('modules',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_modules_name'), 'modules', ['name'], unique=True)
    op.create_table('roles',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('users',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('farms',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('size_acres', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('owner_user_id', sa.UUID(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_farms_name'), 'farms', ['name'], unique=False)
    op.create_table('master_data',
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('properties', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_master_data_category'), 'master_data', ['category'], unique=False)
    op.create_index(op.f('ix_master_data_name'), 'master_data', ['name'], unique=False)
    op.create_table('permissions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('module_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('assigned_by_user_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assigned_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id', 'id')
    )
    op.create_index(op.f('ix_user_roles_role_id'), 'user_roles', ['role_id'], unique=False)
    op.create_index(op.f('ix_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.create_table('batches',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('batch_type_id', sa.UUID(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['batch_type_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('configuration_parameters',
    sa.Column('name', sa.String(), nullable=False, comment='Unique name of the configuration parameter'),
    sa.Column('value', sa.Text(), nullable=False, comment='Value of the parameter (stored as string, can be parsed based on data_type)'),
    sa.Column('description', sa.Text(), nullable=True, comment="Description of the parameter's purpose and usage"),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Indicates if the parameter is active'),
    sa.Column('data_type_id', sa.UUID(), nullable=False, comment="ID of MasterData entry defining the value's data type"),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False, comment='User who created this parameter'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['data_type_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_configuration_parameters_name'), 'configuration_parameters', ['name'], unique=True)
    op.create_table('feedings',
    sa.Column('feeding_date', sa.DateTime(), nullable=False),
    sa.Column('feed_type_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('unit_id', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['feed_type_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grupos',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('purpose_id', sa.UUID(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['purpose_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grupos_name'), 'grupos', ['name'], unique=True)
    op.create_table('health_events',
    sa.Column('event_date', sa.DateTime(), nullable=False),
    sa.Column('event_type_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('unit_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('administered_by_user_id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['administered_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['event_type_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lots',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('capacity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lots_name'), 'lots', ['name'], unique=False)
    op.create_table('products',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('current_stock', sa.Float(), nullable=False),
    sa.Column('minimum_stock_alert', sa.Float(), nullable=False),
    sa.Column('price_per_unit', sa.Float(), nullable=False),
    sa.Column('product_type_id', sa.UUID(), nullable=False),
    sa.Column('unit_id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['product_type_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_name'), 'products', ['name'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', 'id')
    )
    op.create_index(op.f('ix_role_permissions_permission_id'), 'role_permissions', ['permission_id'], unique=False)
    op.create_index(op.f('ix_role_permissions_role_id'), 'role_permissions', ['role_id'], unique=False)
    op.create_table('transactions',
    sa.Column('transaction_date', sa.DateTime(), nullable=False),
    sa.Column('transaction_type_id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('unit_id', sa.UUID(), nullable=True),
    sa.Column('price_per_unit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('currency_id', sa.UUID(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('source_farm_id', sa.UUID(), nullable=True),
    sa.Column('destination_farm_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['currency_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['destination_farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['source_farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['transaction_type_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_farm_access',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('assigned_by_user_id', sa.UUID(), nullable=False),
    sa.Column('can_view', sa.Boolean(), nullable=False),
    sa.Column('can_edit', sa.Boolean(), nullable=False),
    sa.Column('can_manage_users', sa.Boolean(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'farm_id')
    )
    op.create_table('animals',
    sa.Column('tag_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('species_id', sa.UUID(), nullable=True),
    sa.Column('breed_id', sa.UUID(), nullable=True),
    sa.Column('sex', sa.String(), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('current_status', sa.String(), nullable=False),
    sa.Column('origin', sa.String(), nullable=False),
    sa.Column('mother_animal_id', sa.UUID(), nullable=True),
    sa.Column('father_animal_id', sa.UUID(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('photo_url', sa.String(), nullable=True),
    sa.Column('owner_user_id', sa.UUID(), nullable=False),
    sa.Column('current_lot_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['breed_id'], ['master_data.id'], ),
    sa.ForeignKeyConstraint(['current_lot_id'], ['lots.id'], ),
    sa.ForeignKeyConstraint(['father_animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['mother_animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_animals_tag_id'), 'animals', ['tag_id'], unique=True)
    op.create_table('animal_batch_pivot',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('batch_event_id', sa.UUID(), nullable=False),
    sa.Column('assigned_date', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['batch_event_id'], ['batches.id'], ),
    sa.PrimaryKeyConstraint('animal_id', 'batch_event_id')
    )
    op.create_table('animal_feeding_pivot',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('feeding_event_id', sa.UUID(), nullable=False),
    sa.Column('quantity_fed', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['feeding_event_id'], ['feedings.id'], ),
    sa.PrimaryKeyConstraint('animal_id', 'feeding_event_id')
    )
    op.create_table('animal_group',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('grupo_id', sa.UUID(), nullable=False),
    sa.Column('assignment_date', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['grupo_id'], ['grupos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('animal_health_event_pivot',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('health_event_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['health_event_id'], ['health_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('animal_location_history',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('lot_id', sa.UUID(), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reproductive_events',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('event_date', sa.DateTime(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sire_animal_id', sa.UUID(), nullable=True),
    sa.Column('gestation_diagnosis_date', sa.DateTime(), nullable=True),
    sa.Column('gestation_diagnosis_result', sa.String(), nullable=True),
    sa.Column('expected_offspring_date', sa.Date(), nullable=True),
    sa.Column('administered_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['administered_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['sire_animal_id'], ['animals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('weighings',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('weighing_date', sa.DateTime(), nullable=False),
    sa.Column('weight_kg', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('offspring_born',
    sa.Column('reproductive_event_id', sa.UUID(), nullable=False),
    sa.Column('offspring_animal_id', sa.UUID(), nullable=True),
    sa.Column('date_of_birth', sa.DateTime(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('born_by_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['born_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['offspring_animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['reproductive_event_id'], ['reproductive_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('offspring_born')
    op.drop_table('weighings')
    op.drop_table('reproductive_events')
    op.drop_table('animal_location_history')
    op.drop_table('animal_health_event_pivot')
    op.drop_table('animal_group')
    op.drop_table('animal_feeding_pivot')
    op.drop_table('animal_batch_pivot')
    op.drop_index(op.f('ix_animals_tag_id'), table_name='animals')
    op.drop_table('animals')
    op.drop_table('user_farm_access')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_role_permissions_role_id'), table_name='role_permissions')
    op.drop_index(op.f('ix_role_permissions_permission_id'), table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_index(op.f('ix_products_name'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_lots_name'), table_name='lots')
    op.drop_table('lots')
    op.drop_table('health_events')
    op.drop_index(op.f('ix_grupos_name'), table_name='grupos')
    op.drop_table('grupos')
    op.drop_table('feedings')
    op.drop_index(op.f('ix_configuration_parameters_name'), table_name='configuration_parameters')
    op.drop_table('configuration_parameters')
    op.drop_table('batches')
    op.drop_index(op.f('ix_user_roles_user_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_role_id'), table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index(op.f('ix_master_data_name'), table_name='master_data')
    op.drop_index(op.f('ix_master_data_category'), table_name='master_data')
    op.drop_table('master_data')
    op.drop_index(op.f('ix_farms_name'), table_name='farms')
    op.drop_table('farms')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_modules_name'), table_name='modules')
    op.drop_table('modules')
    # ### end Alembic commands ###
