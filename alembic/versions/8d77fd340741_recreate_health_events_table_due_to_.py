"""Recreate health_events table due to enum column issue

Revision ID: 8d77fd340741
Revises: a33493b8cd02
Create Date: 2025-06-20 13:49:29.651741

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Asegúrate de que esta importación exista

# revision identifiers, used by Alembic.
revision: str = '8d77fd340741'
down_revision: Union[str, None] = 'a33493b8cd02'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Comentada o eliminada la línea anterior si no la borraste en el paso anterior
    # op.create_unique_constraint('unique_animal_group_assignment', 'animal_groups', ['animal_id', 'grupo_id'])

    op.drop_index(op.f('idx_animal_health_event_pivot_animal_id'), table_name='animal_health_event_pivot')
    op.drop_index(op.f('idx_animal_health_event_pivot_health_event_id'), table_name='animal_health_event_pivot')
    op.create_unique_constraint('unique_animal_location_entry', 'animal_locations_history', ['animal_id', 'farm_id', 'entry_date'])

    # --- AÑADE ESTAS DOS LÍNEAS NUEVAS ANTES DE op.add_column ---
    # 1. Define el tipo ENUM para usarlo.
    health_event_type_enum = postgresql.ENUM('Vacunacion', 'Desparacitacion', 'Revision_Medica', 'Tratamiento_Enfermedad', 'Cirugia', 'Muerte', 'Otro', name='health_event_type_enum')
    # 2. Crea explícitamente el tipo ENUM en la base de datos.
    health_event_type_enum.create(op.get_bind())
    # -------------------------------------------------------------

    # La línea original de add_column, pero ahora usando el objeto ENUM que acabamos de crear
    op.add_column('health_events', sa.Column('event_type', health_event_type_enum, nullable=False))
    
    op.create_unique_constraint('unique_user_farm_access', 'user_farm_access', ['user_id', 'farm_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('unique_user_farm_access', 'user_farm_access', type_='unique')
    op.drop_column('health_events', 'event_type') # Esta línea está correcta para el downgrade
    op.drop_constraint('unique_animal_location_entry', 'animal_locations_history', type_='unique')
    op.create_index(op.f('idx_animal_health_event_pivot_health_event_id'), 'animal_health_event_pivot', ['health_event_id'], unique=False)
    op.create_index(op.f('idx_animal_health_event_pivot_animal_id'), 'animal_health_event_pivot', ['animal_id'], unique=False)
    # Si comentaste la línea en upgrade, asegúrate de que no haya un create_unique_constraint en downgrade para animal_groups aquí.
    op.drop_constraint('unique_animal_group_assignment', 'animal_groups', type_='unique')

    # --- AÑADE ESTA LÍNEA NUEVA AL FINAL DE downgrade ---
    # Elimina explícitamente el tipo ENUM si se hace un downgrade
    postgresql.ENUM('Vacunacion', 'Desparacitacion', 'Revision_Medica', 'Tratamiento_Enfermedad', 'Cirugia', 'Muerte', 'Otro', name='health_event_type_enum').drop(op.get_bind())
    # ---------------------------------------------------
    # ### end Alembic commands ###
