"""Add Grupo and AnimalGroup models

Revision ID: fc0138732b35
Revises: 
Create Date: 2025-06-16 09:59:18.178317

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fc0138732b35'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('grupos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('purpose_id', sa.UUID(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['purpose_id'], ['master_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('animal_groups',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('grupo_id', sa.UUID(), nullable=False),
    sa.Column('assigned_date', sa.Date(), nullable=False),
    sa.Column('removed_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ),
    sa.ForeignKeyConstraint(['grupo_id'], ['grupos.id'], ),
    sa.PrimaryKeyConstraint('animal_id', 'grupo_id'),
    sa.UniqueConstraint('animal_id', 'grupo_id', name='unique_animal_group_assignment')
    )
    op.drop_index(op.f('idx_animal_locations_history_animal_id'), table_name='animal_locations_history')
    op.drop_index(op.f('idx_animal_locations_history_farm_id'), table_name='animal_locations_history')
    op.drop_index(op.f('idx_animals_current_lot_id'), table_name='animals')
    op.drop_index(op.f('idx_animals_owner_user_id'), table_name='animals')
    op.drop_index(op.f('idx_animals_tag_id'), table_name='animals')
    op.drop_index(op.f('idx_farms_owner_user_id'), table_name='farms')
    op.alter_column('feedings', 'feed_type_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_feedings_feeding_date'), table_name='feedings')
    op.drop_index(op.f('idx_health_events_event_date'), table_name='health_events')
    op.drop_constraint(op.f('unique_lot_name_per_farm'), 'lots', type_='unique')
    op.drop_index(op.f('idx_master_data_category'), table_name='master_data')
    op.drop_constraint(op.f('offspring_born_reproductive_event_id_offspring_animal_id_key'), 'offspring_born', type_='unique')
    op.drop_index(op.f('idx_reproductive_events_animal_id'), table_name='reproductive_events')
    op.drop_index(op.f('idx_transactions_animal_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_transaction_date'), table_name='transactions')
    op.drop_index(op.f('idx_user_farm_access_farm_id'), table_name='user_farm_access')
    op.drop_index(op.f('idx_user_farm_access_user_id'), table_name='user_farm_access')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_weighings_animal_id'), table_name='weighings')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_weighings_animal_id'), 'weighings', ['animal_id'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_user_farm_access_user_id'), 'user_farm_access', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_farm_access_farm_id'), 'user_farm_access', ['farm_id'], unique=False)
    op.create_index(op.f('idx_transactions_transaction_date'), 'transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_animal_id'), 'transactions', ['animal_id'], unique=False)
    op.create_index(op.f('idx_reproductive_events_animal_id'), 'reproductive_events', ['animal_id'], unique=False)
    op.create_unique_constraint(op.f('offspring_born_reproductive_event_id_offspring_animal_id_key'), 'offspring_born', ['reproductive_event_id', 'offspring_animal_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_master_data_category'), 'master_data', ['category'], unique=False)
    op.create_unique_constraint(op.f('unique_lot_name_per_farm'), 'lots', ['farm_id', 'name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_health_events_event_date'), 'health_events', ['event_date'], unique=False)
    op.create_index(op.f('idx_feedings_feeding_date'), 'feedings', ['feeding_date'], unique=False)
    op.alter_column('feedings', 'feed_type_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_index(op.f('idx_farms_owner_user_id'), 'farms', ['owner_user_id'], unique=False)
    op.create_index(op.f('idx_animals_tag_id'), 'animals', ['tag_id'], unique=False)
    op.create_index(op.f('idx_animals_owner_user_id'), 'animals', ['owner_user_id'], unique=False)
    op.create_index(op.f('idx_animals_current_lot_id'), 'animals', ['current_lot_id'], unique=False)
    op.create_index(op.f('idx_animal_locations_history_farm_id'), 'animal_locations_history', ['farm_id'], unique=False)
    op.create_index(op.f('idx_animal_locations_history_animal_id'), 'animal_locations_history', ['animal_id'], unique=False)
    op.drop_table('animal_groups')
    op.drop_table('grupos')
    # ### end Alembic commands ###
